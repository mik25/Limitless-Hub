"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElectronHttpExecutor = undefined;

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

var _bluebirdLstC2;

function _load_bluebirdLstC2() {
    return _bluebirdLstC2 = _interopRequireDefault(require("bluebird-lst-c"));
}

var _electron;

function _load_electron() {
    return _electron = require("electron");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _path = _interopRequireWildcard(require("path"));

var _electronBuilderHttp;

function _load_electronBuilderHttp() {
    return _electronBuilderHttp = require("electron-builder-http");
}

var _url;

function _load_url() {
    return _url = require("url");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ElectronHttpExecutor extends (_electronBuilderHttp || _load_electronBuilderHttp()).HttpExecutor {
    download(url, destination, options) {
        var _this = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            if (options == null || !options.skipDirCreation) {
                yield (0, (_fsExtraP || _load_fsExtraP()).ensureDir)(_path.dirname(destination));
            }
            return yield new (_bluebirdLstC2 || _load_bluebirdLstC2()).default(function (resolve, reject) {
                _this.doDownload(url, destination, 0, options || {}, function (error) {
                    if (error == null) {
                        resolve(destination);
                    } else {
                        reject(error);
                    }
                });
            });
        })();
    }
    addTimeOutHandler(request, callback) {
        request.on("socket", function (socket) {
            socket.setTimeout(60 * 1000, () => {
                callback(new Error("Request timed out"));
                request.abort();
            });
        });
    }
    doDownload(url, destination, redirectCount, options, callback) {
        const parsedUrl = (0, (_url || _load_url()).parse)(url);
        // user-agent must be specified, otherwise some host can return 401 unauthorised
        const requestOpts = {
            protocol: parsedUrl.protocol,
            hostname: parsedUrl.hostname,
            path: parsedUrl.path,
            headers: {
                "User-Agent": "electron-builder"
            }
        };
        const request = (_electron || _load_electron()).net.request(requestOpts, response => {
            if (response.statusCode >= 400) {
                callback(new Error(`Cannot download "${ url }", status ${ response.statusCode }: ${ response.statusMessage }`));
                return;
            }
            const redirectUrl = (0, (_electronBuilderHttp || _load_electronBuilderHttp()).safeGetHeader)(response, "location");
            if (redirectUrl != null) {
                if (redirectCount < (_electronBuilderHttp || _load_electronBuilderHttp()).maxRedirects) {
                    this.doDownload(redirectUrl, destination, redirectCount++, options, callback);
                } else {
                    callback(new Error(`Too many redirects (> ${ (_electronBuilderHttp || _load_electronBuilderHttp()).maxRedirects })`));
                }
                return;
            }
            (0, (_electronBuilderHttp || _load_electronBuilderHttp()).configurePipes)(options, response, destination, callback);
        });
        this.addTimeOutHandler(request, callback);
        request.on("error", callback);
        request.end();
    }
    doApiRequest(options, token, requestProcessor) {
        let redirectCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        const requestOptions = options;
        if ((_electronBuilderHttp || _load_electronBuilderHttp()).debug.enabled) {
            (0, (_electronBuilderHttp || _load_electronBuilderHttp()).debug)(`request: ${ JSON.stringify(requestOptions, null, 2) }`);
        }
        if (token != null) {
            requestOptions.headers.authorization = token.startsWith("Basic") ? token : `token ${ token }`;
        }
        requestOptions.protocol = "https:";
        return new (_bluebirdLstC2 || _load_bluebirdLstC2()).default((resolve, reject, onCancel) => {
            const request = (_electron || _load_electron()).net.request(options, response => {
                try {
                    this.handleResponse(response, options, resolve, reject, redirectCount, token, requestProcessor);
                } catch (e) {
                    reject(e);
                }
            });
            this.addTimeOutHandler(request, reject);
            request.on("error", reject);
            requestProcessor(request, reject);
            onCancel(() => request.abort());
        });
    }
}
exports.ElectronHttpExecutor = ElectronHttpExecutor; //# sourceMappingURL=electronHttpExecutor.js.map