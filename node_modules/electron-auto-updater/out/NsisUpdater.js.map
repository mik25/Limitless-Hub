{
  "version": 3,
  "file": "NsisUpdater.js",
  "sourceRoot": "",
  "sources": [
    "../src/NsisUpdater.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { spawn } from \"child_process\"\nimport * as path from \"path\"\nimport { tmpdir } from \"os\"\nimport { download, DownloadOptions } from \"electron-builder-http\"\nimport { DOWNLOAD_PROGRESS, FileInfo } from \"./api\"\nimport { BintrayOptions, PublishConfiguration, GithubOptions, VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { mkdtemp } from \"fs-extra-p\"\nimport \"source-map-support/register\"\nimport { AppUpdater } from \"./AppUpdater\"\n\nexport class NsisUpdater extends AppUpdater {\n  private setupPath: string | null\n  private quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  constructor(options?: PublishConfiguration | BintrayOptions | GithubOptions) {\n    super(options)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  protected async doDownloadUpdate(versionInfo: VersionInfo, fileInfo: FileInfo) {\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n    }\n\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    if (fileInfo != null && fileInfo.sha2 != null) {\n      downloadOptions.sha2 = fileInfo.sha2\n    }\n\n    return mkdtemp(`${path.join(tmpdir(), \"up\")}-`)\n      .then(it => download(fileInfo.url, path.join(it, fileInfo.name), downloadOptions))\n      .then(it => {\n        this.setupPath = it\n        this.addQuitHandler()\n        const version = this.versionInfo!.version\n        if (this.logger != null) {\n          this.logger.info(`New version ${version} has been downloaded`)\n        }\n        this.emit(\"update-downloaded\", this.versionInfo, null, version, null, null, () => {\n          this.quitAndInstall()\n        })\n        return it\n      })\n      .catch(e => {\n        this.emit(\"error\", e, (e.stack || e).toString())\n        throw e\n      })\n  }\n\n  private addQuitHandler() {\n    if (this.quitHandlerAdded) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.on(\"quit\", () => {\n      this.install(true)\n    })\n  }\n\n  quitAndInstall(): void {\n    if (this.install(false)) {\n      this.app.quit()\n    }\n  }\n\n  private install(isSilent: boolean): boolean {\n    if (this.quitAndInstallCalled) {\n      return false\n    }\n\n    const setupPath = this.setupPath\n    if (!this.updateAvailable || setupPath == null) {\n      const message = \"No update available, can't quit and install\"\n      this.emit(\"error\", new Error(message), message)\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    const args = [\"--updated\"]\n    if (isSilent) {\n      args.push(\"/S\")\n    }\n    spawn(setupPath, args, {\n      detached: true,\n      stdio: \"ignore\",\n    }).unref()\n\n    return true\n  }\n}"
  ]
}
