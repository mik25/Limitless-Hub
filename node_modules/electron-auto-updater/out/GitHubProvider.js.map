{
  "version": 3,
  "file": "GitHubProvider.js",
  "sourceRoot": "",
  "sources": [
    "../src/GitHubProvider.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;AAAA,AAAO,AAAsB,AAAqB,AAAE,AAAkB,AAAE,AAAkB,AAAE,AAAM,AAAO;;;;;;AAEzG,AAAO,AAAE,AAAkB,AAAE,AAAM,AAAmB;;;;AACtD,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAS,AAAE,AAAO,AAAE,AAAM,AAAuB,AAE1D,AAAM;;;;;;;AACJ,gBAA6B,AAAsB;AAAtB,aAAO,UAAP,AAAO,AAAe,AACnD;AAAC;AAEK,AAAgB,oBAAtB,AAAK;;;;AACH,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAW,AAAE;AACnC,gBAAI,AAAO;AAEX,gBAAI,AAAC;AACH,AAAgC;AAChC,sBAAM,AAAW,AAAG,cAAC,MAAM,AAAO,mEAAoB,EAAC,AAAQ,UAAE,AAAY,cAAE,AAAI,AAAE,UAAG,AAAQ,QAAS,AAAC,cAAE,AAAI,MAAE,AAAI,MAAE,EAAC,AAAM,QAAE,AAAkB,AAAC,AAAC,AAAC;AACtJ,AAAO,0BAAI,AAAW,YAAC,AAAQ,SAAC,AAAU,WAAC,AAAG,AAAC,AAAC,IAAtC,GAAyC,AAAW,YAAC,AAAQ,SAAC,AAAS,UAAC,AAAC,AAAC,KAAG,AAAW,YAAC,AAAQ,AAC7G;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,sBAAM,IAAI,AAAK,AAAC,8FAAuF,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAChI;AAAC;AAED,gBAAI,AAAW;AACf,kBAAM,AAAW,cAAG,AAAkB,8CAAC,AAAqB,AAAE,AAAC;AAC/D,kBAAM,AAAkB,AAAG,yBAAG,AAAQ,wBAAc,AAAO,aAAI,AAAW,WAAE;AAC5E,gBAAI,AAAC;AACH,AAAM,yBAAG,MAAM,AAAO,mEAAa,EAAC,AAAQ,UAAE,AAAY,cAAE,AAAI,MAAE,AAAkB,AAAC,AAAC,AACxF;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,AAAY,AAAS,gFAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC5D,0BAAM,IAAI,AAAK,AAAC,sBAAe,AAAW,kDAAqC,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AACxG;AAAC;AACD,sBAAM,AAAC,AACT;AAAC;AAED,AAAkB,kFAAC,AAAM,AAAC;AAC1B,AAAE,AAAC,gBAAC,AAAkB,AAAE,oDAAK,AAAQ,AAAC,UAAC,AAAC;AACtC,AAAM,uBAAC,AAAc,AAAG,uCAAqB,AAAkB,kBAAE,AACnE;AAAC;AACD,AAAM,mBAAC,AAAM,AACf;;AAAC;AAEO,AAAW;AACjB,AAAM,AAAC,oBAAI,AAAI,KAAC,AAAO,QAAC,AAAK,WAAI,AAAI,KAAC,AAAO,QAAC,AAAI,IAAW,AAC/D;AAAC;AAEK,AAAa,iBAAnB,AAAK,CAAe,AAAuB;;;;AACzC,AAAE,AAAC,gBAAC,AAAkB,AAAE,oDAAK,AAAQ,AAAC,UAAC,AAAC;AACtC,AAAM,uBAAM,AAAW,AACzB;AAAC;AAED,kBAAM,AAAQ,WAAG,AAAI,OAAC,AAAW,AAAE;AACnC,AAAmC;AACnC,kBAAM,AAAI,OAAG,AAAW,YAAC,AAAkB,sBAAI,AAAI,MAAC,AAAK,MAAC,AAAQ,SAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAO,QAAC,AAAI,MAAE,AAAG,AAAC;AACvG,AAAM;AACJ,AAAI,sBAAE,AAAI;AACV,AAAG,AAAE,2CAAqB,AAAQ,wBAAc,AAAW,YAAC,AAAO,aAAI,AAAI,IAAE;AAC7E,AAAI,sBAAE,AAAW,YAAC,AAAI,AACvB,AACH;AALS;;AAKR,AACF",
  "sourcesContent": [
    "import { Provider, FileInfo, getDefaultChannelName, getChannelFilename, getCurrentPlatform } from \"./api\"\nimport { VersionInfo, GithubOptions, UpdateInfo } from \"electron-builder-http/out/publishOptions\"\nimport { validateUpdateInfo } from \"./GenericProvider\"\nimport * as path from \"path\"\nimport { HttpError, request } from \"electron-builder-http\"\n\nexport class GitHubProvider implements Provider<VersionInfo> {\n  constructor(private readonly options: GithubOptions) {\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const basePath = this.getBasePath()\n    let version\n\n    try {\n      // do not use API to avoid limit\n      const releaseInfo = (await request<GithubReleaseInfo>({hostname: \"github.com\", path: `${basePath}/latest`}, null, null, {Accept: \"application/json\"}))\n      version = (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on github, please ensure a production release exists: ${e.stack || e.message}`)\n    }\n\n    let result: any\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    const channelFileUrlPath = `${basePath}/download/v${version}/${channelFile}`\n    try {\n      result = await request<UpdateInfo>({hostname: \"github.com\", path: channelFileUrlPath})\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find ${channelFile} in the latest release artifacts: ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    validateUpdateInfo(result)\n    if (getCurrentPlatform() === \"darwin\") {\n      result.releaseJsonUrl = `https://github.com${channelFileUrlPath}`\n    }\n    return result\n  }\n\n  private getBasePath() {\n    return `/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  async getUpdateFile(versionInfo: UpdateInfo): Promise<FileInfo> {\n    if (getCurrentPlatform() === \"darwin\") {\n      return <any>versionInfo\n    }\n\n    const basePath = this.getBasePath()\n    // space is not supported on GitHub\n    const name = versionInfo.githubArtifactName || path.posix.basename(versionInfo.path).replace(/ /g, \"-\")\n    return {\n      name: name,\n      url: `https://github.com${basePath}/download/v${versionInfo.version}/${name}`,\n      sha2: versionInfo.sha2,\n    }\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}"
  ]
}
